/* tslint:disable */
/* eslint-disable */
/**
 * Simple chat app
 * Simple chat application created using NanoBus and IOtas.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@nanochat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Jot } from './Jot';
import {
    JotFromJSON,
    JotFromJSONTyped,
    JotToJSON,
} from './Jot';

/**
 * Jot page
 * @export
 * @interface JotPage
 */
export interface JotPage {
    /**
     * Before timestamp
     * @type {Date}
     * @memberof JotPage
     */
    before?: Date;
    /**
     * The tweets returned
     * @type {Array<Jot>}
     * @memberof JotPage
     */
    items?: Array<Jot>;
    /**
     * Limit result
     * @type {number}
     * @memberof JotPage
     */
    limit?: number;
}

/**
 * Check if a given object implements the JotPage interface.
 */
export function instanceOfJotPage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function JotPageFromJSON(json: any): JotPage {
    return JotPageFromJSONTyped(json, false);
}

export function JotPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): JotPage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'before': !exists(json, 'before') ? undefined : (new Date(json['before'])),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(JotFromJSON)),
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
    };
}

export function JotPageToJSON(value?: JotPage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'before': value.before === undefined ? undefined : (value.before.toISOString()),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(JotToJSON)),
        'limit': value.limit,
    };
}

