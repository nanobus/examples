/* tslint:disable */
/* eslint-disable */
/**
 * Simple chat app
 * Simple chat application created using NanoBus and IOtas.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@nanochat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * User entity
 * @export
 * @interface User
 */
export interface User {
    /**
     * The number of followers
     * @type {number}
     * @memberof User
     */
    followers?: number;
    /**
     * The number of users followed
     * @type {number}
     * @memberof User
     */
    follows?: number;
    /**
     * Handle.
     * @type {string}
     * @memberof User
     */
    handle?: string;
    /**
     * User ID.
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * If the authenticated user is following this user. Will return false if unauthenticated or outside of Users::getProfile.
     * @type {boolean}
     * @memberof User
     */
    isFollowing?: boolean;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'followers': !exists(json, 'followers') ? undefined : json['followers'],
        'follows': !exists(json, 'follows') ? undefined : json['follows'],
        'handle': !exists(json, 'handle') ? undefined : json['handle'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isFollowing': !exists(json, 'isFollowing') ? undefined : json['isFollowing'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'followers': value.followers,
        'follows': value.follows,
        'handle': value.handle,
        'id': value.id,
        'isFollowing': value.isFollowing,
    };
}

