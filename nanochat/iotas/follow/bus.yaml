specs:
  - uses: apex
    with:
      filename: apex.aidl

migrate:
  followdb:
    uses: postgres
    with:
      dataSource: ${env:IOTA_FOLLOW_DB}
      directory: sql

resources:
  followdb:
    uses: postgres
    with:
      url: ${env:IOTA_FOLLOW_DB}

resiliency:
  retries:
    database:
      policy: constant
      duration: 3s

  circuitBreakers:
    database:
      policy: constant
      duration: 3s

providers:
  'nanochat.io.follows.v1.FollowStore':
    load:
      steps:
        - name: Lookup user by ID
          uses: "@postgres/query"
          with:
            single: true
            resource: followdb
            sql: |
              SELECT u.id, u.followers, u.follows
              FROM follow_user u
              WHERE id = $1
            args:
              - input.userId
          # retry: database
          # circuitBreaker: database
    
    getMultiple:
      steps:
        - name: Lookup multiple users by ID
          uses: "@postgres/query"
          with:
            resource: followdb
            sql: |
              SELECT u.id, u.followers, u.follows
              FROM follow_user u
              WHERE id = any($1)
            args:
              - input.userIds
          # retry: database
          # circuitBreaker: database

    follow:
      steps:
        - name: Store follower
          uses: "@postgres/exec"
          with:
            single: true
            resource: followdb
            sql: |
              SELECT fn_follow($1, $2) as success;
            args:
              - claims.sub
              - input.followedId
          # retry: database
          # circuitBreaker: database

    unfollow:
      steps:
        - name: Delete follower
          uses: "@postgres/exec"
          with:
            resource: followdb
            sql: |
              SELECT fn_unfollow($1, $2) as success;
            args:
              - claims.sub
              - input.followedId
          # retry: database
          # circuitBreaker: database

    fetchFollowers:
      steps:
        - name: Fetch followers
          uses: "@postgres/query"
          with:
            resource: followdb
            sql: |
              SELECT u.id, f.time
              FROM follow_user u
              JOIN follow f ON u.id = f.follower
              WHERE f.follows = $1
              ORDER BY f.time DESC
              OFFSET $2
              LIMIT $3
            args:
              - input.userId
              - input.offset
              - input.limit
          # retry: database
          # circuitBreaker: database

    fetchFollows:
      steps:
        - name: Fetch follows
          uses: "@postgres/query"
          with:
            resource: followdb
            sql: |
              SELECT u.id, f.time
              FROM follow_user u
              JOIN follow f ON u.id = f.follows
              WHERE f.follower = $1
              ORDER BY f.time DESC
              OFFSET $2
              LIMIT $3
            args:
              - input.userId
              - input.offset
              - input.limit
          # retry: database
          # circuitBreaker: database

    myFollows:
      steps:
        - name: Fetch follows
          uses: "@postgres/query"
          with:
            resource: followdb
            sql: |
              SELECT u.id, f.time
              FROM follow_user u
              JOIN follow f ON u.id = f.follows
              WHERE f.follower = $1
            args:
              - claims.sub
          # retry: database
          # circuitBreaker: database
