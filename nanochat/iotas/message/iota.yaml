version: 0.0.1
spec: apex.axdl
resources:
  - messagedb
interfaces:
  nanochat.io.message.v1.MessageStore:
    store:
      steps:
        - name: Store a tweet
          uses: '@postgres/query'
          with:
            resource: messagedb
            single: true
            sql: |-

              INSERT INTO message (user_id, message, time)
              VALUES ($1, $2, now())
              RETURNING *
            args:
              - claims.sub
              - input.message
    load:
      steps:
        - name: Get a single message
          uses: '@postgres/query'
          with:
            resource: messagedb
            single: true
            sql: |-

              SELECT * FROM message
              WHERE id = $1
            args:
              - input.id
    delete:
      steps:
        - name: Remove a message
          uses: '@postgres/query'
          with:
            resource: messagedb
            single: true
            sql: |-

              DELETE FROM message
              WHERE id = $1
                AND user_id = $2
              RETURNING *
            args:
              - input.id
              - claims.sub
    myMessages:
      steps:
        - name: Get the tweet timeline
          uses: '@postgres/query'
          with:
            resource: messagedb
            sql: |-

              SELECT t.* FROM message t
              JOIN follows f ON t.user_id = f.follows
              WHERE f.follower = $1
                AND (t.time < $2 OR $2 IS NULL)
              ORDER BY t.time DESC LIMIT $3
            args:
              - claims.sub
              - input.before
              - input.limit
    getFeed:
      steps:
        - name: Get message timeline for multiple users
          uses: '@postgres/query'
          with:
            resource: messagedb
            sql: |-

              SELECT * FROM message t
              WHERE (t.user_id = any($1) OR t.user_id = $2)
                AND (t.time < $3 OR $3 IS NULL)
              ORDER BY time DESC
            args:
              - input.userIds
              - claims.sub
              - input.before
          returns: exists
    getUserMessages:
      steps:
        - name: Get message timeline for a single user
          uses: '@postgres/query'
          with:
            resource: messagedb
            sql: |-

              SELECT * FROM message t
              WHERE t.user_id = $1
                AND (t.time < $2 OR $2 IS NULL)
              ORDER BY time DESC
            args:
              - input.userId
              - input.before
          returns: exists
