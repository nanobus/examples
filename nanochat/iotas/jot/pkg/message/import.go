// Code generated by @apexlang/codegen. DO NOT EDIT.

package message

import (
	"github.com/nanobus/iota/go/wasmrs/invoke"
)

var (
	gCaller invoke.Caller
)

func Initialize(caller invoke.Caller) {
	gCaller = caller
}

type MessageStoreImpl struct {
	opStore           uint32
	opLoad            uint32
	opDelete          uint32
	opMyMessages      uint32
	opGetFeed         uint32
	opGetUserMessages uint32
}

func NewMessageStore() *MessageStoreImpl {
	return &MessageStoreImpl{
		opStore:           invoke.ImportRequestResponse("nanochat.io.messsage.v1.MessageStore", "store"),
		opLoad:            invoke.ImportRequestResponse("nanochat.io.messsage.v1.MessageStore", "load"),
		opDelete:          invoke.ImportRequestResponse("nanochat.io.messsage.v1.MessageStore", "delete"),
		opMyMessages:      invoke.ImportRequestStream("nanochat.io.messsage.v1.MessageStore", "myMessages"),
		opGetFeed:         invoke.ImportRequestStream("nanochat.io.messsage.v1.MessageStore", "getFeed"),
		opGetUserMessages: invoke.ImportRequestStream("nanochat.io.messsage.v1.MessageStore", "getUserMessages"),
	}
}

func (m *MessageStoreImpl) Store(ctx context.Context, message string) mono.Mono[Message] {
	request := MessageStoreStoreArgs{
		Message: message,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opStore)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestResponse(ctx, p)
	return mono.Map(m, transform.MsgPackDecode[Message])
}

func (m *MessageStoreImpl) Load(ctx context.Context, id uuid.UUID) mono.Mono[Message] {
	request := MessageStoreLoadArgs{
		ID: id,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opLoad)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestResponse(ctx, p)
	return mono.Map(m, transform.MsgPackDecode[Message])
}

func (m *MessageStoreImpl) Delete(ctx context.Context, id uuid.UUID) mono.Mono[Message] {
	request := MessageStoreDeleteArgs{
		ID: id,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opDelete)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestResponse(ctx, p)
	return mono.Map(m, transform.MsgPackDecode[Message])
}

func (m *MessageStoreImpl) MyMessages(ctx context.Context, before *time.Time, limit uint32) flux.Flux[Message] {
	request := MessageStoreMyMessagesArgs{
		Before: before,
		Limit:  limit,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return flux.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opMyMessages)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestStream(ctx, p)
	return flux.Map(m, transform.MsgPackDecode[Message])
}

func (m *MessageStoreImpl) GetFeed(ctx context.Context, userIds []uuid.UUID, before *time.Time, limit uint32) flux.Flux[Message] {
	request := MessageStoreGetFeedArgs{
		UserIds: userIds,
		Before:  before,
		Limit:   limit,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return flux.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opGetFeed)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestStream(ctx, p)
	return flux.Map(m, transform.MsgPackDecode[Message])
}

func (m *MessageStoreImpl) GetUserMessages(ctx context.Context, userID uuid.UUID, before *time.Time, limit uint32) flux.Flux[Message] {
	request := MessageStoreGetUserMessagesArgs{
		UserID: userID,
		Before: before,
		Limit:  limit,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return flux.Error[Message](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], m.opGetUserMessages)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	p := payload.New(payloadData, metadata[:])
	m := gCaller.RequestStream(ctx, p)
	return flux.Map(m, transform.MsgPackDecode[Message])
}
