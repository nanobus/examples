// Code generated by @apexlang/codegen. DO NOT EDIT.

package message

import (
	"github.com/google/uuid"
	"github.com/nanobus/iota/go/msgpack"
	"github.com/nanobus/iota/go/msgpack/convert"
	"time"
)

var _ = convert.Package

type MessageStoreStoreArgs struct {
	Message string `json:"message" yaml:"message" msgpack:"message"`
}

func (o *MessageStoreStoreArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "message":
			o.Message, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreStoreArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("message")
	encoder.WriteString(o.Message)

	return nil
}

type MessageStoreLoadArgs struct {
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
}

func (o *MessageStoreLoadArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = convert.Parse(uuid.Parse)(decoder.ReadString())
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreLoadArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("id")
	encoder.WriteString(o.ID.String())

	return nil
}

type MessageStoreDeleteArgs struct {
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
}

func (o *MessageStoreDeleteArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = convert.Parse(uuid.Parse)(decoder.ReadString())
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreDeleteArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("id")
	encoder.WriteString(o.ID.String())

	return nil
}

type MessageStoreMyMessagesArgs struct {
	Before *time.Time `json:"before,omitempty" yaml:"before,omitempty" msgpack:"before,omitempty"`
	Limit  uint32     `json:"limit" yaml:"limit" msgpack:"limit"`
}

func (o *MessageStoreMyMessagesArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "before":
			o.Before, err = decoder.ReadNillableTime()
		case "limit":
			o.Limit, err = decoder.ReadUint32()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreMyMessagesArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(2)
	encoder.WriteString("before")
	encoder.WriteNillableTime(o.Before)
	encoder.WriteString("limit")
	encoder.WriteUint32(o.Limit)

	return nil
}

type MessageStoreGetFeedArgs struct {
	UserIds []uuid.UUID `json:"userIds" yaml:"userIds" msgpack:"userIds"`
	Before  *time.Time  `json:"before,omitempty" yaml:"before,omitempty" msgpack:"before,omitempty"`
	Limit   uint32      `json:"limit" yaml:"limit" msgpack:"limit"`
}

func (o *MessageStoreGetFeedArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "userIds":
			listSize, err := decoder.ReadArraySize()
			if err != nil {
				return err
			}
			o.UserIds = make([]uuid.UUID, 0, listSize)
			for listSize > 0 {
				listSize--
				var nonNilItem uuid.UUID
				nonNilItem, err = convert.Parse(uuid.Parse)(decoder.ReadString())
				if err != nil {
					return err
				}
				o.UserIds = append(o.UserIds, nonNilItem)
			}
		case "before":
			o.Before, err = decoder.ReadNillableTime()
		case "limit":
			o.Limit, err = decoder.ReadUint32()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreGetFeedArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(3)
	encoder.WriteString("userIds")
	encoder.WriteArraySize(uint32(len(o.UserIds)))
	for _, v := range o.UserIds {
		encoder.WriteString(v.String())
	}
	encoder.WriteString("before")
	encoder.WriteNillableTime(o.Before)
	encoder.WriteString("limit")
	encoder.WriteUint32(o.Limit)

	return nil
}

type MessageStoreGetUserMessagesArgs struct {
	UserID uuid.UUID  `json:"userId" yaml:"userId" msgpack:"userId"`
	Before *time.Time `json:"before,omitempty" yaml:"before,omitempty" msgpack:"before,omitempty"`
	Limit  uint32     `json:"limit" yaml:"limit" msgpack:"limit"`
}

func (o *MessageStoreGetUserMessagesArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "userId":
			o.UserID, err = convert.Parse(uuid.Parse)(decoder.ReadString())
		case "before":
			o.Before, err = decoder.ReadNillableTime()
		case "limit":
			o.Limit, err = decoder.ReadUint32()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *MessageStoreGetUserMessagesArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(3)
	encoder.WriteString("userId")
	encoder.WriteString(o.UserID.String())
	encoder.WriteString("before")
	encoder.WriteNillableTime(o.Before)
	encoder.WriteString("limit")
	encoder.WriteUint32(o.Limit)

	return nil
}

func (o *Message) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = convert.Parse(uuid.Parse)(decoder.ReadString())
		case "userId":
			o.UserID, err = convert.Parse(uuid.Parse)(decoder.ReadString())
		case "message":
			o.Message, err = decoder.ReadString()
		case "time":
			o.Time, err = decoder.ReadTime()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *Message) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(4)
	encoder.WriteString("id")
	encoder.WriteString(o.ID.String())
	encoder.WriteString("userId")
	encoder.WriteString(o.UserID.String())
	encoder.WriteString("message")
	encoder.WriteString(o.Message)
	encoder.WriteString("time")
	encoder.WriteTime(o.Time)

	return nil
}
