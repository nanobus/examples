// Code generated by @apexlang/codegen. DO NOT EDIT.

package message

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/nanobus/iota/go/rx/flux"
	"github.com/nanobus/iota/go/rx/mono"
)

type ns struct{}

func (n *ns) Namespace() string {
	return "nanochat.io.message.v1"
}

type MessageStore interface {
	Store(ctx context.Context, message string) mono.Mono[Message]
	Load(ctx context.Context, id uuid.UUID) mono.Mono[Message]
	Delete(ctx context.Context, id uuid.UUID) mono.Mono[Message]
	MyMessages(ctx context.Context, before *time.Time, limit uint32) flux.Flux[Message]
	GetFeed(ctx context.Context, userIds []uuid.UUID, before *time.Time, limit uint32) flux.Flux[Message]
	GetUserMessages(ctx context.Context, userID uuid.UUID, before *time.Time, limit uint32) flux.Flux[Message]
}

// Message record.
type Message struct {
	ns
	// The dynamically generated Tweet ID.
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
	// The tweet owner.
	UserID uuid.UUID `json:"userId" yaml:"userId" msgpack:"userId"`
	// The message body.
	Message string `json:"message" yaml:"message" msgpack:"message"`
	// The time the tweet was entered.
	Time time.Time `json:"time" yaml:"time" msgpack:"time"`
}

func (m *Message) Type() string {
	return "Message"
}
