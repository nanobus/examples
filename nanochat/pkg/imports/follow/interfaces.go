// Code generated by @apexlang/codegen. DO NOT EDIT.

package follow

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/nanobus/iota/go/rx/flux"
	"github.com/nanobus/iota/go/rx/mono"
)

type ns struct{}

func (n *ns) Namespace() string {
	return "nanochat.io.follows.v1"
}

type FollowStore interface {
	Load(ctx context.Context, userID uuid.UUID) mono.Mono[UserRef]
	GetMultiple(ctx context.Context, userIds []uuid.UUID) flux.Flux[UserRef]
	IsFollowing(ctx context.Context, userID uuid.UUID) mono.Mono[bool]
	Follow(ctx context.Context, followedID uuid.UUID) mono.Void
	Unfollow(ctx context.Context, followedID uuid.UUID) mono.Void
	FetchFollowers(ctx context.Context, userID uuid.UUID, offset uint32, limit uint32) flux.Flux[FollowRef]
	FetchFollows(ctx context.Context, userID uuid.UUID, offset uint32, limit uint32) flux.Flux[FollowRef]
	MyFollows(ctx context.Context) flux.Flux[FollowRef]
}

type FollowRef struct {
	ns
	// User ID.
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
	// Creation timestamp (for sorting)
	Time time.Time `json:"time" yaml:"time" msgpack:"time"`
}

func (f *FollowRef) Type() string {
	return "FollowRef"
}

// User record
type UserRef struct {
	ns
	// User ID.
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
	// The number of followers
	Followers uint32 `json:"followers" yaml:"followers" msgpack:"followers"`
	// The number of users followed
	Follows uint32 `json:"follows" yaml:"follows" msgpack:"follows"`
}

func (u *UserRef) Type() string {
	return "UserRef"
}

// Follow record
type Follow struct {
	ns
	// The ID of the user being followed
	FollowedID uuid.UUID `json:"followedId" yaml:"followedId" msgpack:"followedId"`
	// The follower's user ID
	FollowerID uuid.UUID `json:"followerId" yaml:"followerId" msgpack:"followerId"`
	// Creation timestamp (for sorting)
	Time time.Time `json:"time" yaml:"time" msgpack:"time"`
}

func (f *Follow) Type() string {
	return "Follow"
}
