// Code generated by @apexlang/codegen. DO NOT EDIT.

package like

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/nanobus/iota/go/rx/flux"
	"github.com/nanobus/iota/go/rx/mono"
)

type ns struct{}

func (n *ns) Namespace() string {
	return "nanochat.io.like.v1"
}

type LikeStore interface {
	Like(ctx context.Context, likableID uuid.UUID) mono.Void
	Unlike(ctx context.Context, likableID uuid.UUID) mono.Void
	Load(ctx context.Context, likableID uuid.UUID) mono.Mono[Likable]
	Delete(ctx context.Context, likableID uuid.UUID) mono.Mono[Likable]
	GetMultiple(ctx context.Context, likableIds []uuid.UUID) flux.Flux[Likable]
	GetLikedBy(ctx context.Context, likableID uuid.UUID, offset uint32, limit uint32) flux.Flux[LikeRef]
}

type LikeRef struct {
	ns
	// The likers's user ID
	UserID uuid.UUID `json:"userId" yaml:"userId" msgpack:"userId"`
	// Creation timestamp (for sorting)
	Time time.Time `json:"time" yaml:"time" msgpack:"time"`
}

func (l *LikeRef) Type() string {
	return "LikeRef"
}

type Likable struct {
	ns
	// Identifer of the likable entity.
	ID uuid.UUID `json:"id" yaml:"id" msgpack:"id"`
	// The number of likes.
	Likes uint32 `json:"likes" yaml:"likes" msgpack:"likes"`
}

func (l *Likable) Type() string {
	return "Likable"
}

// Like record
type Like struct {
	ns
	// The tweet ID liked
	LikableID uuid.UUID `json:"likableId" yaml:"likableId" msgpack:"likableId"`
	// The likers's user ID
	UserID uuid.UUID `json:"userId" yaml:"userId" msgpack:"userId"`
	// Creation timestamp (for sorting)
	Time time.Time `json:"time" yaml:"time" msgpack:"time"`
}

func (l *Like) Type() string {
	return "Like"
}
