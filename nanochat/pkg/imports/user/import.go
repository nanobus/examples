// Code generated by @apexlang/codegen. DO NOT EDIT.

package user

import (
	"context"
	"encoding/binary"

	"github.com/google/uuid"
	"github.com/nanobus/iota/go/invoke"
	"github.com/nanobus/iota/go/msgpack"
	"github.com/nanobus/iota/go/payload"
	"github.com/nanobus/iota/go/proxy"
	"github.com/nanobus/iota/go/rx/flux"
	"github.com/nanobus/iota/go/rx/mono"
	"github.com/nanobus/iota/go/transform"
)

var (
	gCaller invoke.Caller
)

func Initialize(caller invoke.Caller) {
	gCaller = caller
}

type UserStoreImpl struct {
	opMe           uint32
	opLoad         uint32
	opGetMultiple  uint32
	opFindByHandle uint32
	opGetFive      uint32
}

func NewUserStore() *UserStoreImpl {
	return &UserStoreImpl{
		opMe:           invoke.ImportRequestResponse("nanochat.io.user.v1.UserStore", "me"),
		opLoad:         invoke.ImportRequestResponse("nanochat.io.user.v1.UserStore", "load"),
		opGetMultiple:  invoke.ImportRequestStream("nanochat.io.user.v1.UserStore", "getMultiple"),
		opFindByHandle: invoke.ImportRequestResponse("nanochat.io.user.v1.UserStore", "findByHandle"),
		opGetFive:      invoke.ImportRequestStream("nanochat.io.user.v1.UserStore", "getFive"),
	}
}

func (u *UserStoreImpl) Me(ctx context.Context) mono.Mono[User] {
	payloadData := []byte{}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], u.opMe)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.MsgPackDecode[User])
}

func (u *UserStoreImpl) Load(ctx context.Context, userID uuid.UUID) mono.Mono[User] {
	request := UserStoreLoadArgs{
		UserID: userID,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[User](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], u.opLoad)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.MsgPackDecode[User])
}

func (u *UserStoreImpl) GetMultiple(ctx context.Context, userIds []uuid.UUID) flux.Flux[User] {
	request := UserStoreGetMultipleArgs{
		UserIds: userIds,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return flux.Error[User](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], u.opGetMultiple)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestStream(ctx, pl)
	return flux.Map(future, transform.MsgPackDecode[User])
}

func (u *UserStoreImpl) FindByHandle(ctx context.Context, handle string) mono.Mono[User] {
	request := UserStoreFindByHandleArgs{
		Handle: handle,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[User](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], u.opFindByHandle)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.MsgPackDecode[User])
}

func (u *UserStoreImpl) GetFive(ctx context.Context) flux.Flux[User] {
	payloadData := []byte{}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], u.opGetFive)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestStream(ctx, pl)
	return flux.Map(future, transform.MsgPackDecode[User])
}
