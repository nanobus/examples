const a0_0x52e35e = a0_0x92e3; (function (_0x1cde9e, _0x454131) { const _0x128e80 = a0_0x92e3, _0x494cb8 = _0x1cde9e(); while (!![]) { try { const _0x4ef1b1 = -parseInt(_0x128e80(0xb2)) / 0x1 * (-parseInt(_0x128e80(0x8c)) / 0x2) + -parseInt(_0x128e80(0x98)) / 0x3 + parseInt(_0x128e80(0x83)) / 0x4 + -parseInt(_0x128e80(0xbb)) / 0x5 * (parseInt(_0x128e80(0xb7)) / 0x6) + parseInt(_0x128e80(0xa3)) / 0x7 + parseInt(_0x128e80(0x81)) / 0x8 + -parseInt(_0x128e80(0xba)) / 0x9; if (_0x4ef1b1 === _0x454131) break; else _0x494cb8['push'](_0x494cb8['shift']()); } catch (_0x31c5e2) { _0x494cb8['push'](_0x494cb8['shift']()); } } }(a0_0x3ef7, 0x2bb5f)); const Provider = require(a0_0x52e35e(0x9b)), path = require(a0_0x52e35e(0x96)), express = require('express'), cors = require('cors'), Logger = require(a0_0x52e35e(0xae)), AccountStore = require(a0_0x52e35e(0xa7)), configFuncs = require(a0_0x52e35e(0x90)), usersFuncs = require(a0_0x52e35e(0x85)), interactions = require(a0_0x52e35e(0x8d)), health = require('./server/health'), logger = new Logger(a0_0x52e35e(0xa9)), fs = require('fs'), https = require(a0_0x52e35e(0x92)); function a0_0x92e3(_0xb7c3c0, _0xabab28) { const _0x3ef7fe = a0_0x3ef7(); return a0_0x92e3 = function (_0x92e3c, _0x2c0af2) { _0x92e3c = _0x92e3c - 0x81; let _0x5cc8af = _0x3ef7fe[_0x92e3c]; return _0x5cc8af; }, a0_0x92e3(_0xb7c3c0, _0xabab28); } let server, httpsServer, kill = () => { const _0x4d405e = a0_0x52e35e; logger['info'](_0x4d405e(0x8e)), server && server[_0x4d405e(0x8b)](), httpsServer && ('rIbnU' !== _0x4d405e(0xb1) ? _0x5c9d59[_0x4d405e(0x8b)]() : httpsServer['close']()); }; function a0_0x3ef7() { const _0x1a402f = ['./server/accountStore', 'use', 'soidc', 'ejs', 'PmHJS', 'SIGINT', 'keyPath', '@qlik-trial/node-microservice-logger', 'SIGQUIT', 'bind', 'rIbnU', '253702TEKtIN', 'claim_mapping', 'enabled', 'HTTPS\x20listening\x20on\x20', 'static', '508572OjIqTl', 'hJUdW', 'SIGTERM', '4231440JYdsdp', '5BMVYJl', '1850336FXuayf', 'client_config', '862004iHHISm', 'generate', './server/users', 'x-warning', 'createServer', 'createKeyStore', 'listen', 'utf8', 'close', '2iXezuP', './server/interactions', 'shutting\x20down', 'trust\x20proxy', './server/config', 'findById', 'https', 'avatars', 'resolve', 'loadUsers', 'path', 'readFileSync', '645027Fqfxwf', 'initialize', 'view\x20engine', 'oidc-provider', 'port', 'None', 'Not\x20for\x20Production\x20Use!', 'callback', 'external_host_name', 'Failed\x20to\x20start', 'info', '1739325kHOEva', 'set', 'views', 'getConfig']; a0_0x3ef7 = function () { return _0x1a402f; }; return a0_0x3ef7(); } process['on'](a0_0x52e35e(0xb9), kill), process['on'](a0_0x52e35e(0xac), kill), process['on'](a0_0x52e35e(0xaf), kill); async function start() { const _0x537b43 = a0_0x52e35e, _0x41f41c = configFuncs[_0x537b43(0xa6)](), _0x57f0b7 = new AccountStore(usersFuncs[_0x537b43(0x95)](_0x41f41c[_0x537b43(0xa0)])), _0x2ad3cb = new Provider(_0x41f41c['idp_name'], { 'findById': _0x57f0b7[_0x537b43(0x91)][_0x537b43(0xb0)](_0x57f0b7), 'claims': _0x41f41c[_0x537b43(0xb3)], 'cookies': { 'long': { 'sameSite': 'Lax' }, 'short': { 'sameSite': 'Lax' } }, 'features': { 'claimsParameter': !![], 'discovery': !![], 'encryption': !![], 'introspection': !![], 'registration': !![], 'request': !![], 'revocation': !![], 'sessionManagement': !![], 'clientCredentials': !![], 'alwaysIssueRefresh': !![] } }), _0x3fcf2a = Provider[_0x537b43(0x88)](); await _0x3fcf2a[_0x537b43(0x84)]('RSA', 0x800), await _0x2ad3cb[_0x537b43(0x99)]({ 'keystore': _0x3fcf2a, 'clients': _0x41f41c[_0x537b43(0x82)] }), _0x2ad3cb['app']['proxy'] = !![]; const _0xb48321 = express(); Logger['injectLogger'](_0xb48321), _0xb48321[_0x537b43(0xa8)]((_0x1eb12e, _0x4eba4a, _0xdbff06) => { const _0xa170ea = _0x537b43; 'hJUdW' !== _0xa170ea(0xb8) ? _0x3a442a['close']() : (_0x4eba4a['set'](_0xa170ea(0x86), _0xa170ea(0x9e)), _0xdbff06()); }), _0xb48321[_0x537b43(0xa4)](_0x537b43(0x8f), !![]), _0xb48321[_0x537b43(0xa4)](_0x537b43(0x9a), _0x537b43(0xaa)), _0xb48321[_0x537b43(0xa4)](_0x537b43(0xa5), path[_0x537b43(0x94)](__dirname, _0x537b43(0xa5))), _0xb48321['use']('/avatars', express[_0x537b43(0xb6)](path['resolve'](__dirname, _0x537b43(0x93)))), _0xb48321[_0x537b43(0xa8)](cors()), _0xb48321[_0x537b43(0xa8)](health()), _0xb48321[_0x537b43(0xa8)](interactions(_0x2ad3cb, _0x57f0b7)['router']), _0xb48321[_0x537b43(0xa8)](_0x2ad3cb[_0x537b43(0x9f)]), server = _0xb48321[_0x537b43(0x89)](_0x41f41c[_0x537b43(0x9c)]), logger[_0x537b43(0xa2)]('HTTP\x20listening\x20on\x20' + _0x41f41c[_0x537b43(0x9c)]); if (_0x41f41c['https'][_0x537b43(0xb4)]) { if (_0x537b43(0xab) === _0x537b43(0xab)) { logger[_0x537b43(0xa2)]('HTTPS\x20enabled'); const _0x348f18 = { 'key': fs[_0x537b43(0x97)](_0x41f41c[_0x537b43(0x92)][_0x537b43(0xad)], _0x537b43(0x8a)), 'cert': fs['readFileSync'](_0x41f41c['https']['certPath'], _0x537b43(0x8a)) }; httpsServer = https[_0x537b43(0x87)](_0x348f18, _0xb48321), httpsServer[_0x537b43(0x89)](_0x41f41c[_0x537b43(0x92)][_0x537b43(0x9c)]), logger[_0x537b43(0xa2)](_0x537b43(0xb5) + _0x41f41c[_0x537b43(0x92)][_0x537b43(0x9c)]); } else _0x48b978[_0x537b43(0xa2)](_0x537b43(0xa1)), _0x1d7c06['info'](_0x40e31e); } } start()['then'](() => { const _0x2f174c = a0_0x52e35e; logger[_0x2f174c(0xa2)]('Ready!'); })['catch'](_0x3d143c => { const _0x35409b = a0_0x52e35e; logger['info'](_0x35409b(0xa1)), logger['info'](_0x3d143c); });