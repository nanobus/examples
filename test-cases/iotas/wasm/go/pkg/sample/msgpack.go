// Code generated by @apexlang/codegen. DO NOT EDIT.

package sample

import (
	"github.com/nanobus/iota/go/msgpack"
	"github.com/nanobus/iota/go/msgpack/convert"
)

var _ = convert.Package

type TestReverseArgs struct {
	Input string `json:"input" yaml:"input" msgpack:"input"`
}

func (o *TestReverseArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "input":
			o.Input, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *TestReverseArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("input")
	encoder.WriteString(o.Input)

	return nil
}

type ExternalUppercaseArgs struct {
	Input string `json:"input" yaml:"input" msgpack:"input"`
}

func (o *ExternalUppercaseArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "input":
			o.Input, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *ExternalUppercaseArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("input")
	encoder.WriteString(o.Input)

	return nil
}
