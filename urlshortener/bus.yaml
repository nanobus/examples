id: url-shortener
version: 0.0.1
spec: apex.axdl
main: build/urlshortener.wasm
package:
  registry: reg.candle.run
  org: examples
tracing:
  uses: jaeger
  with:
    collectorEndpoint: '${env:JAEGER_TRACES_ENDPOINT}'
resources:
  - db
resiliency:
  timeouts:
    events: 30s
  retries:
    events:
      constant:
        duration: 3s
    database:
      constant:
        duration: 3s
  circuitBreakers:
    database:
      timeout: 1m
    publish:
      maxRequests: 2
      timeout: 30s
initializers:
  db:
    uses: nanobus.migrate.postgres/v1
    with:
      dataSource: '${env:URLSHORTENER_DB}'
      sourceUrl: '${env:URLSHORTENER_SQL}'
transports:
  http:
    uses: nanobus.transport.http.server/v1
    with:
      address: ':8080'
      middleware: []
      routers:
        - uses: nanobus.transport.http.rest/v1
          with:
            documentation:
              swaggerUI: true
              postman: true
              restClient: true
authorization:
  urlshortener.v1.Shortener:
    shorten:
      unauthenticated: true
    lookup:
      unauthenticated: true
interfaces:
  urlshortener.v1.Shortener:
    lookup:
      steps:
        - name: Load URL
          uses: call_provider
          with:
            handler: 'urlshortener.v1.Repository::loadById'
            input: |-
              {
                "id": pipe.id,
              }
          returns: target
        - name: Redirect
          uses: http_response
          with:
            status: 301
            headers:
              - name: Location
                value: target.url
providers:
  urlshortener.v1.Repository:
    loadById:
      steps:
        - name: Load by ID
          uses: '@postgres/load'
          with:
            resource: db
            namespace: urlshortener.v1
            type: URL
            key: $.id
          retry: database
          circuitBreaker: database
    loadByURL:
      steps:
        - name: Load by URL
          uses: '@postgres/find_one'
          with:
            resource: db
            namespace: urlshortener.v1
            type: URL
            where:
              - query: url = ?
                value: $.url
            notFoundError: not_found
          retry: database
          circuitBreaker: database
    storeURL:
      steps:
        - name: Store the URL
          uses: '@postgres/exec'
          with:
            resource: db
            sql: 'INSERT INTO url (id, url) VALUES ($1, $2)'
            args:
              - $.id
              - $.url
          retry: database
          circuitBreaker: database
errors:
  not_found:
    type: URLNotFound
    code: not_found
    title: URL not found
    message: 'URL with id {{ .key }} was not found'
  permission_denied:
    type: PermissionDenied
    code: permission_denied
    title: Permission denied
    message: >-
      You don't have permission to access this resource or to perform the
      operation.
  unauthenticated:
    type: Unauthenticated
    code: unauthenticated
    title: Unauthenticated
    message: You must be logged in to perform the operation.
