// Code generated by @apexlang/codegen. DO NOT EDIT.

package urlshortener

import (
	"context"
	"encoding/binary"

	"github.com/nanobus/iota/go/invoke"
	"github.com/nanobus/iota/go/msgpack"
	"github.com/nanobus/iota/go/payload"
	"github.com/nanobus/iota/go/proxy"
	"github.com/nanobus/iota/go/rx/mono"
	"github.com/nanobus/iota/go/transform"
)

type ShortenerShortenArgs struct {
	URL string `json:"url" yaml:"url" msgpack:"url"`
}

func (o *ShortenerShortenArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "url":
			o.URL, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *ShortenerShortenArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("url")
	encoder.WriteString(o.URL)

	return nil
}

type ShortenerLookupArgs struct {
	ID string `json:"id" yaml:"id" msgpack:"id"`
}

func (o *ShortenerLookupArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *ShortenerLookupArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("id")
	encoder.WriteString(o.ID)

	return nil
}

type RepositoryLoadByIdArgs struct {
	ID string `json:"id" yaml:"id" msgpack:"id"`
}

func (o *RepositoryLoadByIdArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *RepositoryLoadByIdArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("id")
	encoder.WriteString(o.ID)

	return nil
}

type RepositoryLoadByURLArgs struct {
	URL string `json:"url" yaml:"url" msgpack:"url"`
}

func (o *RepositoryLoadByURLArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "url":
			o.URL, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *RepositoryLoadByURLArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("url")
	encoder.WriteString(o.URL)

	return nil
}

func (o *URL) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "id":
			o.ID, err = decoder.ReadString()
		case "url":
			o.URL, err = decoder.ReadString()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *URL) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(2)
	encoder.WriteString("id")
	encoder.WriteString(o.ID)
	encoder.WriteString("url")
	encoder.WriteString(o.URL)

	return nil
}

func RegisterShortener(svc Shortener) {
	invoke.ExportRequestResponse("urlshortener.v1.Shortener", "shorten", shortenerShortenWrapper(svc))
}

func shortenerShortenWrapper(svc Shortener) invoke.RequestResponseHandler {
	return func(ctx context.Context, p payload.Payload) mono.Mono[payload.Payload] {
		var inputArgs ShortenerShortenArgs
		if err := transform.CodecDecode(p, &inputArgs); err != nil {
			return mono.Error[payload.Payload](err)
		}
		response := svc.Shorten(ctx, inputArgs.URL)
		return mono.Map(response, transform.MsgPackEncode[URL])
	}
}

var (
	gCaller invoke.Caller
)

func Initialize(caller invoke.Caller) {
	gCaller = caller
}

type RepositoryImpl struct {
	opLoadByID  uint32
	opLoadByURL uint32
	opStoreURL  uint32
}

func NewRepository() *RepositoryImpl {
	return &RepositoryImpl{
		opLoadByID:  invoke.ImportRequestResponse("urlshortener.v1.Repository", "loadById"),
		opLoadByURL: invoke.ImportRequestResponse("urlshortener.v1.Repository", "loadByURL"),
		opStoreURL:  invoke.ImportRequestResponse("urlshortener.v1.Repository", "storeURL"),
	}
}

func (r *RepositoryImpl) LoadByID(ctx context.Context, id string) mono.Mono[URL] {
	request := RepositoryLoadByIdArgs{
		ID: id,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[URL](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], r.opLoadByID)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.MsgPackDecode[URL])
}

func (r *RepositoryImpl) LoadByURL(ctx context.Context, url string) mono.Mono[URL] {
	request := RepositoryLoadByURLArgs{
		URL: url,
	}
	payloadData, err := msgpack.ToBytes(&request)
	if err != nil {
		return mono.Error[URL](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], r.opLoadByURL)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.MsgPackDecode[URL])
}

func (r *RepositoryImpl) StoreURL(ctx context.Context, url *URL) mono.Void {
	payloadData, err := msgpack.ToBytes(url)
	if err != nil {
		return mono.Error[struct{}](err)
	}
	var metadata [8]byte
	stream, ok := proxy.FromContext(ctx)
	binary.BigEndian.PutUint32(metadata[0:4], r.opStoreURL)
	if ok {
		binary.BigEndian.PutUint32(metadata[4:8], stream.StreamID())
	}
	pl := payload.New(payloadData, metadata[:])
	future := gCaller.RequestResponse(ctx, pl)
	return mono.Map(future, transform.Void.Decode)
}
